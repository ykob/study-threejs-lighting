(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{123:function(t,e,n){"use strict";var r=n(171),o=n(178),c=n(13),l=n(8),f=n(14),d=(n(54),n(24),n(36),n(42),n(27),n(0)),h=n(172),v=(n(31),n(11)),m=n(12),x=n(4);function y(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Object(x.a)(t);if(e){var o=Object(x.a)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Object(m.a)(this,n)}}var L=function(t){Object(v.a)(n,t);var e=y(n);function n(t,r,o,c){var f;return Object(l.a)(this,n),(f=e.call(this,t,r,o,c)).far=1e3,f.setFocalLength(50),f.position.set(0,0,150),f}return Object(f.a)(n,[{key:"resize",value:function(t){this.aspect=t.x/t.y,this.updateProjectionMatrix()}}]),n}(d.u);n(23);function _(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Object(x.a)(t);if(e){var o=Object(x.a)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Object(m.a)(this,n)}}var w=function(t){Object(v.a)(n,t);var e=_(n);function n(){var t;Object(l.a)(this,n);var r=new d.J(16,6,16,100),o=new d.B({uniforms:d.L.merge([d.K.lights,{time:{value:0},normalMap:{value:null}}]),vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\n\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform bool isOrthographic;\n\n// https://github.com/mrdoob/three.js/blob/master/src/renderers/shaders/ShaderLib/meshbasic_vert.glsl.js\n#define LAMBERT\n\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n\n// #include <common>\n#define PI 3.141592653589793\n\n#ifndef saturate\n  #define saturate(a) clamp(a, 0.0, 1.0)\n#endif\n\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\n\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n  #ifdef CLEARCOAT\n    vec3 clearcoatNormal;\n  #endif\n};\n\n// #include <lights_pars_begin>\nuniform vec3 ambientLightColor;\n\nvec3 getAmbientLightIrradiance(const in vec3 ambientLightColor) {\n  vec3 irradiance = ambientLightColor;\n  return irradiance *= PI;\n}\n\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\n\tvoid getDirectionalDirectLightIrradiance(\n    const in DirectionalLight directionalLight,\n    const in GeometricContext geometry,\n    out IncidentLight directLight\n  ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n\nvoid main(void) {\n  // #include <beginnormal_vertex>\n  vec3 objectNormal = vec3(normal);\n\n  // #include <defaultnormal_vertex>\n  vec3 transformedNormal = objectNormal;\n  transformedNormal = normalMatrix * transformedNormal;\n\n  // #include <begin_vertex>\n  vec3 transformed = vec3(position);\n\n  // #include <project_vertex>\n  vec4 mvPosition = vec4(transformed, 1.0);\n  mvPosition = modelViewMatrix * mvPosition;\n  gl_Position = projectionMatrix * mvPosition;\n\n  // #include <lights_lambert_vertex>\n  vec3 diffuse = vec3( 1.0 );\n\n  GeometricContext geometry;\n  geometry.position = mvPosition.xyz;\n  geometry.normal = normalize(transformedNormal);\n  geometry.viewDir = (isOrthographic)\n    ? vec3(0, 0, 1)\n    : normalize(-mvPosition.xyz);\n  \n  GeometricContext backGeometry;\n  backGeometry.position = geometry.position;\n  backGeometry.normal = -geometry.normal;\n  backGeometry.viewDir = geometry.viewDir;\n  \n  vLightFront = vec3(0.0);\n  vIndirectFront = vec3(0.0);\n  #ifdef DOUBLE_SIDED\n    vLightBack = vec3(0.0);\n    vIndirectBack = vec3(0.0);\n  #endif\n\n  IncidentLight directLight;\n  float dotNL;\n  vec3 directLightColor_Diffuse;\n\n  vIndirectFront += getAmbientLightIrradiance(ambientLightColor);\n\n  #if NUM_DIR_LIGHTS > 0\n    #pragma unroll_loop_start\n    for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n      getDirectionalDirectLightIrradiance(directionalLights[ i ], geometry, directLight);\n      dotNL = dot(geometry.normal, directLight.direction);\n      directLightColor_Diffuse = PI * directLight.color;\n      vLightFront += saturate(dotNL) * directLightColor_Diffuse;\n      #ifdef DOUBLE_SIDED\n        vLightBack += saturate(-dotNL) * directLightColor_Diffuse;\n      #endif\n    }\n    #pragma unroll_loop_end\n  #endif\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\n// https://github.com/mrdoob/three.js/blob/master/src/renderers/shaders/ShaderLib/meshbasic_frag.glsl.js\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n\n// #include <lights_pars_begin>\nuniform vec3 ambientLightColor;\n\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n\nvoid main() {\n  ReflectedLight reflectedLight = ReflectedLight(vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));\n\n  #ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += (gl_FrontFacing) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = (gl_FrontFacing) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\n  vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\n  gl_FragColor = vec4(outgoingLight, 1.0);\n}\n",lights:!0});return(t=e.call(this,r,o)).name="MeshLambert",t}return Object(f.a)(n,[{key:"start",value:function(t){this.material.uniforms.normalMap.value=t}},{key:"update",value:function(){this.rotation.y+=.01}}]),n}(d.r),N="#define GLSLIFY 1\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec4 tangent;\n\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform mat3 uvTransform;\n\nvarying vec3 vViewPosition;\nvarying vec2 vUv;\nvarying vec3 vNormal;\n\n// Fog\nvarying float fogDepth;\n\nvoid main(void) {\n  vec3 transformedNormal = normal;\n  transformedNormal = normalMatrix * transformedNormal;\n\n  vec3 transformed = position;\n  vec4 mvPosition = viewMatrix * modelMatrix * vec4(transformed, 1.0);\n\n  vViewPosition = -mvPosition.xyz;\n  vUv = (uvTransform * vec3(uv, 1.0)).xy;\n  vNormal = normalize(transformedNormal);\n\n  // Fog\n  fogDepth = -mvPosition.z;\n\n  gl_Position = projectionMatrix * mvPosition;\n}\n",D="#extension GL_OES_standard_derivatives : enable\n\nprecision highp float;\n#define GLSLIFY 1\n\nuniform mat4 viewMatrix;\n\nuniform float shininess;\n\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D map;\nuniform sampler2D normalMap;\nuniform vec2 normalScale;\n\nvarying vec3 vViewPosition;\nvarying vec2 vUv;\nvarying vec3 vNormal;\n\n// Common\n#define RECIPROCAL_PI 0.3183098861837907\n\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nstruct IncidentLight {\n  vec3 color;\n  vec3 direction;\n  bool visible;\n};\n\n// Ambient Light\nuniform vec3 ambientLightColor;\n\n// Directional Lights\n#if NUM_DIR_LIGHTS > 0\n  struct DirectionalLight {\n    vec3 direction;\n    vec3 color;\n  };\n  uniform DirectionalLight directionalLights[NUM_DIR_LIGHTS];\n#endif\n\n// Point Lights\n#if NUM_POINT_LIGHTS > 0\n  struct PointLight {\n    vec3 position;\n    vec3 color;\n    float distance;\n    float decay;\n  };\n  uniform PointLight pointLights[NUM_POINT_LIGHTS];\n\n  void getPointDirectLightIrradiance(\n    const in PointLight pointLight,\n    const in GeometricContext geometry,\n    out IncidentLight directLight\n  ) {\n    vec3 lVector = pointLight.position - geometry.position;\n    directLight.direction = normalize(lVector);\n    float lightDistance = length(lVector);\n    directLight.color = pointLight.color;\n    directLight.color *= pow(clamp(-lightDistance / pointLight.distance + 1.0, 0.0, 1.0), pointLight.decay);\n  }\n#endif\n\n// Diffuse\nvec3 calcDiffuse(\n  const in GeometricContext geometry,\n  const in IncidentLight directLight\n) {\n  float dotNL = dot(geometry.normal, directLight.direction);\n  return directLight.color * clamp(dotNL, 0.0, 1.0);\n}\n\n// Specular\nvec3 F_Schlick(const in vec3 specularColor, const in float dotLH) {\n  float fresnel = exp2((-5.55473 * dotLH - 6.98316) * dotLH);\n  return (1.0 - specularColor) * fresnel + specularColor;\n}\nfloat D_BlinnPhong(const in float shininess, const in float dotNH) {\n  return RECIPROCAL_PI * (shininess * 0.5 + 1.0) * pow(dotNH, shininess);\n}\nvec3 calcSpecular(\n  const in GeometricContext geometry,\n  const in IncidentLight directLight\n) {\n  vec3 halfDir = normalize(directLight.direction + geometry.viewDir);\n  float dotNH = clamp(dot(geometry.normal, halfDir), 0.0, 1.0);\n  float dotLH = clamp(dot(directLight.direction, halfDir), 0.0, 1.0);\n  vec3 F = F_Schlick(vec3(1.0), dotLH);\n  float G = 0.25;\n  float D = D_BlinnPhong(shininess, dotNH);\n  return (F * (G * D));\n}\n\n// Perturb Normal\n// https://github.com/glslify/glsl-perturb-normal\nmat3 cotangent(vec3 N, vec3 p, vec2 uv) {\n  // get edge vectors of the pixel triangle\n  vec3 dp1 = dFdx(p);\n  vec3 dp2 = dFdy(p);\n  vec2 duv1 = dFdx(uv);\n  vec2 duv2 = dFdy(uv);\n\n  // solve the linear system\n  vec3 dp2perp = cross(dp2, N);\n  vec3 dp1perp = cross(N, dp1);\n  vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;\n  vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;\n\n  // construct a scale-invariant frame \n  float invmax = 1.0 / sqrt(max(dot(T,T), dot(B,B)));\n  return mat3(normalize(T * invmax), normalize(B * invmax), N);\n}\nvec3 perturb(vec3 map, vec3 N, vec3 V, vec2 texcoord) {\n  mat3 TBN = cotangent(N, -V, texcoord);\n  return normalize(TBN * map);\n}\n\n// Fog\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\nvarying float fogDepth;\n\nvoid main() {\n  vec4 diffuseColor = vec4(diffuse, opacity);\n\n  // Map Fragment\n  vec4 texelColor = texture2D(map, vUv);\n  diffuseColor *= texelColor;\n\n  // Normal with Tangent Space\n  vec3 normal = normalize(vNormal);\n  vec3 mapN = texture2D(normalMap, vUv).xyz * 2.0 - 1.0;\n  mapN.xy *= normalScale;\n  normal = perturb(mapN, normal, normalize(vViewPosition), vUv);\n\n  // Define geometry\n  GeometricContext geometry;\n  geometry.position = -vViewPosition;\n  geometry.normal = normal;\n  geometry.viewDir = normalize(vViewPosition);\n\n  vec3 diffuse;\n  vec3 specular;\n  vec3 irradiance;\n  IncidentLight directLight;\n\n  // Directional Light\n  #if NUM_DIR_LIGHTS > 0\n    #pragma unroll_loop_start\n    for (int i = 0; i < NUM_DIR_LIGHTS; i++) {\n      directLight.direction = directionalLights[i].direction;\n      directLight.color = directionalLights[i].color;\n\n      // diffuse\n      irradiance = calcDiffuse(geometry, directLight);\n      diffuse += irradiance * diffuseColor.rgb;\n\n      // specular\n      specular += irradiance * calcSpecular(geometry, directLight);\n    }\n    #pragma unroll_loop_end\n  #endif\n\n  // Point Light\n  #if NUM_POINT_LIGHTS > 0\n    #pragma unroll_loop_start\n    for (int i = 0; i < NUM_POINT_LIGHTS; i++) {\n      getPointDirectLightIrradiance(pointLights[i], geometry, directLight);\n\n      // diffuse\n      irradiance = calcDiffuse(geometry, directLight);\n      diffuse += irradiance * diffuseColor.rgb;\n\n      // specular\n      specular += irradiance * calcSpecular(geometry, directLight);\n    }\n    #pragma unroll_loop_end\n  #endif\n\n  vec3 light = diffuse + specular + ambientLightColor * diffuseColor.rgb;\n\n  gl_FragColor = vec4(light, diffuseColor.a);\n\n  // Fog\n  float fogFactor = smoothstep(fogNear, fogFar, fogDepth);\n\n  gl_FragColor.rgb = mix(gl_FragColor.rgb, fogColor, fogFactor);\n}\n";function I(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Object(x.a)(t);if(e){var o=Object(x.a)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Object(m.a)(this,n)}}var M=function(t){Object(v.a)(n,t);var e=I(n);function n(){var t;Object(l.a)(this,n);var r=new d.J(16,6,16,100),o=new d.B({uniforms:d.L.merge([d.K.common,d.K.normalmap,d.K.lights,d.K.fog,{time:{value:0},shininess:{value:100}}]),vertexShader:N,fragmentShader:D,lights:!0,fog:!0});return o.uniforms.uvTransform.value.scale(3,1),(t=e.call(this,r,o)).name="MeshPhong",t}return Object(f.a)(n,[{key:"start",value:function(map,t){var e=this.material.uniforms;e.map.value=map,e.normalMap.value=t}},{key:"update",value:function(){this.rotation.y+=.01}}]),n}(d.r),C=n(174),P=n(175);function S(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Object(x.a)(t);if(e){var o=Object(x.a)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Object(m.a)(this,n)}}var O=function(t){Object(v.a)(n,t);var e=S(n);function n(){var t;Object(l.a)(this,n);var r=new d.w(1e3,1e3);r.computeTangents();var o=new d.B({uniforms:d.L.merge([d.K.common,d.K.normalmap,d.K.lights,d.K.fog,{time:{value:0},shininess:{value:120},reflectivity:{value:.05},textureMatrix:{value:new d.q},tReflectionMap:{value:null},tRefractionMap:{value:null},resolution:{value:new d.N},tDepth1:{value:null},tDepth2:{value:null},cameraNear:{value:.1},cameraFar:{value:1e3}}]),vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec4 tangent;\n\nuniform mat4 textureMatrix;\n\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\n\nuniform mat3 uvTransform;\n\nvarying vec3 vViewPosition;\nvarying vec3 vToEye;\nvarying vec2 vUv;\nvarying vec4 vCoord;\nvarying vec3 vNormal;\nvarying vec3 vTangent;\nvarying vec3 vBitangent;\n\n// Fog\nvarying float fogDepth;\n\nvoid main(void) {\n  vec3 transformedNormal = normal;\n  transformedNormal = normalMatrix * transformedNormal;\n\n  vec3 transformed = position;\n  vec4 mvPosition = viewMatrix * modelMatrix * vec4(transformed, 1.0);\n\n  vec3 transformedTangent = (viewMatrix * modelMatrix * vec4(tangent.xyz, 0.0)).xyz;\n\n  vViewPosition = -mvPosition.xyz;\n  vToEye = cameraPosition - (modelMatrix * vec4(transformed, 1.0)).xyz;\n  vUv = (uvTransform * vec3(uv, 1.0)).xy;\n  vCoord = textureMatrix * vec4(position, 1.0);\n  vNormal = normalize(transformedNormal);\n  vTangent = normalize(transformedTangent);\n  vBitangent = normalize(cross(vNormal, vTangent) * tangent.w);\n\n  // Fog\n  fogDepth = -mvPosition.z;\n\n  gl_Position = projectionMatrix * mvPosition;\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 viewMatrix;\n\nuniform float time;\nuniform float shininess;\nuniform float reflectivity;\nuniform mat4 textureMatrix;\nuniform sampler2D tReflectionMap;\nuniform sampler2D tRefractionMap;\nuniform vec2 resolution;\nuniform sampler2D tDepth1;\nuniform sampler2D tDepth2;\nuniform float cameraNear;\nuniform float cameraFar;\n\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D normalMap;\nuniform vec2 normalScale;\n\nvarying vec3 vViewPosition;\nvarying vec3 vToEye;\nvarying vec2 vUv;\nvarying vec4 vCoord;\nvarying vec3 vNormal;\nvarying vec3 vTangent;\nvarying vec3 vBitangent;\n\n// Common\n#define RECIPROCAL_PI 0.3183098861837907\n\nstruct GeometricContext {\n  vec3 position;\n  vec3 normal;\n  vec3 viewDir;\n};\nstruct IncidentLight {\n  vec3 color;\n  vec3 direction;\n  bool visible;\n};\n\n// Directional Lights\n#if NUM_DIR_LIGHTS > 0\n  struct DirectionalLight {\n    vec3 direction;\n    vec3 color;\n  };\n  uniform DirectionalLight directionalLights[NUM_DIR_LIGHTS];\n#endif\n\n// Point Lights\n#if NUM_POINT_LIGHTS > 0\n  struct PointLight {\n    vec3 position;\n    vec3 color;\n    float distance;\n    float decay;\n  };\n  uniform PointLight pointLights[NUM_POINT_LIGHTS];\n\n  void getPointDirectLightIrradiance(\n    const in PointLight pointLight,\n    const in GeometricContext geometry,\n    out IncidentLight directLight\n  ) {\n    vec3 lVector = pointLight.position - geometry.position;\n    directLight.direction = normalize(lVector);\n    float lightDistance = length(lVector);\n    directLight.color = pointLight.color;\n    directLight.color *= pow(clamp(-lightDistance / pointLight.distance + 1.0, 0.0, 1.0), pointLight.decay);\n  }\n#endif\n\n// Diffuse\nvec3 calcDiffuse(\n  const in GeometricContext geometry,\n  const in IncidentLight directLight\n) {\n  float dotNL = dot(geometry.normal, directLight.direction);\n  return directLight.color * clamp(dotNL, 0.0, 1.0);\n}\n\n// Specular\nvec3 F_Schlick(const in vec3 specularColor, const in float dotLH) {\n  float fresnel = exp2((-5.55473 * dotLH - 6.98316) * dotLH);\n  return (1.0 - specularColor) * fresnel + specularColor;\n}\nfloat D_BlinnPhong(const in float shininess, const in float dotNH) {\n  return RECIPROCAL_PI * (shininess * 0.5 + 1.0) * pow(dotNH, shininess);\n}\nvec3 calcSpecular(\n  const in GeometricContext geometry,\n  const in IncidentLight directLight\n) {\n  vec3 halfDir = normalize(directLight.direction + geometry.viewDir);\n  float dotNH = clamp(dot(geometry.normal, halfDir), 0.0, 1.0);\n  float dotLH = clamp(dot(directLight.direction, halfDir), 0.0, 1.0);\n  vec3 F = F_Schlick(vec3(1.0), dotLH);\n  float G = 0.25;\n  float D = D_BlinnPhong(shininess, dotNH);\n  return (F * (G * D));\n}\n\n// Blending Normal Map\nvec3 blendNormalRNM(vec3 n1, vec3 n2) {\n  n1 += vec3(0.0, 0.0, 1.0);\n  n2 *= vec3(-1.0, -1.0, 1.0);\n  return n1 * dot(n1, n2) / n1.z - n2;\n}\n\n// Fog\nuniform vec3 fogColor;\nuniform float fogNear;\nuniform float fogFar;\nvarying float fogDepth;\n\n// Depth\nfloat viewZToOrthographicDepth(const in float viewZ, const in float near, const in float far) {\n  return (viewZ + near) / (near - far);\n}\nfloat perspectiveDepthToViewZ(const in float invClipZ, const in float near, const in float far) {\n  return (near * far) / ((far - near) * invClipZ - far);\n}\nfloat readDepth(sampler2D depthSampler, vec2 coord) {\n  float fragCoordZ = texture2D(depthSampler, coord).x;\n  float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);\n  return viewZToOrthographicDepth(viewZ, cameraNear, cameraFar);\n}\n\nvoid main() {\n  vec4 diffuseColor = vec4(diffuse, opacity);\n\n  // Normal Map\n  vec4 mapN1 = texture2D(normalMap, vUv + time * vec2(0.01, -0.01));\n  vec4 mapN2 = texture2D(normalMap, vUv - time * vec2(0.01, -0.01));\n  vec3 mapN = blendNormalRNM(mapN1.xyz * 2.0 - 1.0, mapN2.xyz * 2.0 - 1.0);\n  mapN.xy *= normalScale;\n\n  // Normal with Tangent Space\n  vec3 normal = normalize(vNormal);\n  vec3 tangent = normalize(vTangent);\n  vec3 bitangent = normalize(vBitangent);\n  mat3 vTBN = mat3(tangent, bitangent, normal);\n  normal = normalize(vTBN * mapN);\n\n  // Define geometry\n  GeometricContext geometry;\n  geometry.position = -vViewPosition;\n  geometry.normal = normal;\n  geometry.viewDir = normalize(vViewPosition);\n\n  vec3 diffuse;\n  vec3 specular;\n  vec3 irradiance;\n  IncidentLight directLight;\n\n  // Directional Light\n  #if NUM_DIR_LIGHTS > 0\n    #pragma unroll_loop_start\n    for (int i = 0; i < NUM_DIR_LIGHTS; i++) {\n      directLight.direction = directionalLights[i].direction;\n      directLight.color = directionalLights[i].color;\n\n      // diffuse\n      irradiance = calcDiffuse(geometry, directLight);\n      diffuse += irradiance * diffuseColor.rgb;\n    }\n    #pragma unroll_loop_end\n  #endif\n\n  // Point Light\n  #if NUM_POINT_LIGHTS > 0\n    #pragma unroll_loop_start\n    for (int i = 0; i < NUM_POINT_LIGHTS; i++) {\n      getPointDirectLightIrradiance(pointLights[i], geometry, directLight);\n\n      // diffuse\n      irradiance = calcDiffuse(geometry, directLight);\n      diffuse += irradiance * diffuseColor.rgb;\n\n      // specular\n      specular += irradiance * calcSpecular(geometry, directLight);\n    }\n    #pragma unroll_loop_end\n  #endif\n\n  vec3 light = diffuse + specular;\n\n  // Normal for reflect and refract.\n  vec4 mapNR = mix(mapN1, mapN2, 0.1);\n  vec3 normalR = normalize(vec3(mapNR.r * 2.0 - 1.0, mapNR.b, mapNR.g * 2.0 - 1.0));\n\n  // calculate the fresnel term to blend reflection and refraction maps\n  float theta = max(dot(normalize(vToEye), normalR), 0.0);\n  float reflectance = reflectivity + (1.0 - reflectivity) * pow((1.0 - theta), 5.0);\n  vec3 coord = vCoord.xyz / vCoord.w;\n  vec2 uv = coord.xy + coord.z * normalR.xz * 0.15;\n  vec4 reflectColor = texture2D(tReflectionMap, vec2(1.0 - uv.x, uv.y));\n  vec4 refractColor = texture2D(tRefractionMap, uv) * 0.2;\n\n  // Depth for water's edge\n  float depth1 = readDepth(tDepth1, gl_FragCoord.xy / resolution + mapN.xy * 0.05);\n  float depth2 = readDepth(tDepth2, gl_FragCoord.xy / resolution + mapN.xy * 0.05);\n  float waterEdge = (1.0 - smoothstep(0.0, 0.004, abs(depth1 - depth2))) * 0.2;\n\n  gl_FragColor = vec4(light, 1.0) + mix(refractColor, reflectColor, reflectance) + waterEdge;\n\n  // Fog\n  float fogFactor = smoothstep(fogNear, fogFar, fogDepth);\n\n  gl_FragColor.rgb = mix(gl_FragColor.rgb, fogColor, fogFactor);\n}\n",lights:!0,fog:!0});o.uniforms.uvTransform.value.scale(5,5),o.uniforms.diffuse.value.set(4456516),(t=e.call(this,r,o)).name="MeshRipple",t.position.y=-25,t.rotation.x=Math.PI/180*-90;var c=d.m;return t.reflector=new C.a(r,{textureWidth:1024,textureHeight:1024,clipBias:0,encoding:c}),t.refractor=new P.a(r,{textureWidth:1024,textureHeight:1024,clipBias:0,encoding:c}),t.reflector.matrixAutoUpdate=!1,t.refractor.matrixAutoUpdate=!1,o.uniforms.tReflectionMap.value=t.reflector.getRenderTarget().texture,o.uniforms.tRefractionMap.value=t.refractor.getRenderTarget().texture,t}return Object(f.a)(n,[{key:"start",value:function(t,e,n){var r=this.material.uniforms;r.normalMap.value=t,r.tDepth1.value=e,r.tDepth2.value=n}},{key:"onBeforeRender",value:function(t,e,n){var r=this.material.uniforms;r.textureMatrix.value.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),r.textureMatrix.value.multiply(n.projectionMatrix),r.textureMatrix.value.multiply(n.matrixWorldInverse),r.textureMatrix.value.multiply(this.matrixWorld),this.visible=!1,this.reflector.matrixWorld.copy(this.matrixWorld),this.refractor.matrixWorld.copy(this.matrixWorld),this.reflector.onBeforeRender(t,e,n),this.refractor.onBeforeRender(t,e,n),this.visible=!0}},{key:"update",value:function(time){this.material.uniforms.time.value+=time}},{key:"resize",value:function(t){this.material.uniforms.resolution.value.copy(t)}}]),n}(d.r);function R(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Object(x.a)(t);if(e){var o=Object(x.a)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Object(m.a)(this,n)}}var j=function(t){Object(v.a)(n,t);var e=R(n);function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:16777215,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.1;return Object(l.a)(this,n),e.call(this,t,r)}return n}(d.a);function z(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Object(x.a)(t);if(e){var o=Object(x.a)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Object(m.a)(this,n)}}var B=function(t){Object(v.a)(n,t);var e=z(n);function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:16711680,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.5;return Object(l.a)(this,n),e.call(this,t,r)}return n}(d.g);function T(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Object(x.a)(t);if(e){var o=Object(x.a)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Object(m.a)(this,n)}}var k=function(t){Object(v.a)(n,t);var e=T(n);function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:16711680,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.5,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:100,c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;return Object(l.a)(this,n),e.call(this,t,r,o,c)}return n}(d.x);function H(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Object(x.a)(t);if(e){var o=Object(x.a)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Object(m.a)(this,n)}}var F=function(t){Object(v.a)(n,t);var e=H(n);function n(){var t;Object(l.a)(this,n);var r=new d.k(20,1),o=new d.B({uniforms:d.L.merge([d.K.common,d.K.normalmap,d.K.lights,d.K.fog,{time:{value:0},shininess:{value:100}}]),vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec4 tangent;\n\nuniform mat4 modelMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform mat3 uvTransform;\n\nvarying vec3 vViewPosition;\nvarying vec2 vUv;\nvarying vec3 vNormal;\n\n// Instancing\nattribute mat4 instanceMatrix;\n\n// Fog\nvarying float fogDepth;\n\nvoid main(void) {\n  vec3 transformedNormal = normal;\n  transformedNormal = normalMatrix * transformedNormal;\n\n  vec3 transformed = position;\n  vec4 mvPosition = viewMatrix * modelMatrix * instanceMatrix * vec4(transformed, 1.0);\n\n  vViewPosition = -mvPosition.xyz;\n  vUv = (uvTransform * vec3(uv, 1.0)).xy;\n  vNormal = normalize(transformedNormal);\n\n  // Fog\n  fogDepth = -mvPosition.z;\n\n  gl_Position = projectionMatrix * mvPosition;\n}\n",fragmentShader:D,lights:!0,fog:!0});o.uniforms.uvTransform.value.scale(2,1),(t=e.call(this,r,o,5)).name="InstanceMeshPhong";for(var c=new d.s,i=0;i<5;i++){var f=i/5;c.position.set(60*Math.cos(f*(Math.PI/180*360)),-35,60*Math.sin(f*(Math.PI/180*360))),c.updateMatrix(),t.setMatrixAt(i,c.matrix)}return t.instanceMatrix.needsUpdate=!0,t}return Object(f.a)(n,[{key:"start",value:function(map,t){var e=this.material.uniforms;e.map.value=map,e.normalMap.value=t}},{key:"update",value:function(){this.rotation.y+=.01}}]),n}(d.l);function G(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Object(x.a)(t);if(e){var o=Object(x.a)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Object(m.a)(this,n)}}var U=function(t){Object(v.a)(n,t);var e=G(n);function n(){var t;Object(l.a)(this,n);var r=new d.w(1e3,1e3);r.computeTangents();var o=new d.B({uniforms:d.L.merge([d.K.common,d.K.normalmap,d.K.lights,d.K.fog,{time:{value:0},shininess:{value:30}}]),vertexShader:N,fragmentShader:D,lights:!0,fog:!0});return o.uniforms.uvTransform.value.scale(10,10),(t=e.call(this,r,o)).name="Ground",t.position.y=-40,t.rotation.x=Math.PI/180*-90,t}return Object(f.a)(n,[{key:"start",value:function(map,t){var e=this.material.uniforms;e.map.value=map,e.normalMap.value=t}}]),n}(d.r);function E(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Object(x.a)(t);if(e){var o=Object(x.a)(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return Object(m.a)(this,n)}}var V=function(t){Object(v.a)(n,t);var e=E(n);function n(){var t;Object(l.a)(this,n);var r=new d.F(500,32,32),o=new d.B({uniforms:{map:{value:null}},vertexShader:"#define GLSLIFY 1\nattribute vec3 position;\nattribute vec2 uv;\n\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat4 modelMatrix;\n\nvarying vec2 vUv;\n\nvoid main(void) {\n  vec3 transformed = position;\n  vec4 mvPosition = viewMatrix * modelMatrix * vec4(transformed, 1.0);\n\n  vUv = uv + vec2(0.45, 0.0);\n\n  gl_Position = projectionMatrix * mvPosition;\n}\n",fragmentShader:"precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D map;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texelColor = texture2D(map, vUv);\n  float gradual = smoothstep(0.48, 0.52, vUv.y);\n\n  gl_FragColor = vec4(texelColor.rgb * gradual, 1.0);\n}\n",side:d.b});return(t=e.call(this,r,o)).name="Background",t}return Object(f.a)(n,[{key:"start",value:function(map){this.material.uniforms.map.value=map}}]),n}(d.r),canvas=document.createElement("canvas");canvas.setAttribute("id","canvas-webgl");var $=function(){function t(){Object(l.a)(this,t),this.renderer=new d.Q({canvas:canvas,alpha:!0,antialias:!0}),this.resolution=new d.N,this.clock=new d.c({autoStart:!1}),this.scene=new d.D,this.camera=new L,this.texLoader=new d.I,this.controls=new h.a(this.camera,canvas),this.meshLambert=new w,this.meshPhong=new M,this.water=new O,this.ambLight=new j,this.dirLight1=new B(16742263,.3),this.dirLight1.position.set(-20,20,20),this.dirLight2=new B(7829503,.3),this.dirLight2.position.set(20,20,20),this.pointLight1=new k(16724787,.5,160),this.pointLight1.position.set(-50,20,0),this.pointLight2=new k(3355647,.5,160),this.pointLight2.position.set(50,20,0),this.instanceMeshPhong=new F,this.ground=new U,this.background=new V,this.dirLightHelper1=new d.h(this.dirLight1,5),this.dirLightHelper2=new d.h(this.dirLight2,5),this.pointLightHelper1=new d.y(this.pointLight1,5),this.pointLightHelper2=new d.y(this.pointLight2,5),this.target1=new d.R,this.target2=new d.R,this.target1.depthBuffer=this.target2.depthBuffer=!0,this.target1.depthTexture=new d.f,this.target2.depthTexture=new d.f,this.target1.depthTexture.format=this.target2.depthTexture.format=d.e,this.target1.depthTexture.type=this.target2.depthTexture.type=d.M,this.isPlaying=!0,this.renderer.setClearColor(0,1),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=d.t,this.scene.fog=new d.j(0,100,500),this.controls.dampingFactor=.1,this.controls.enableDamping=!0,this.controls.target.set(0,0,0),this.controls.saveState(),document.body.appendChild(canvas)}var e;return Object(f.a)(t,[{key:"start",value:(e=Object(c.a)(regeneratorRuntime.mark((function t(){var e,r,c,l,f,h,v,m=this;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=[n(240),n(241),n(242),n(243),n(244),n(245)],t.next=3,Promise.all(Object(o.a)(e.map((function(t){return m.texLoader.loadAsync(t)})))).then((function(t){(r=t[0]).wrapT=r.wrapS=d.C,(c=t[1]).wrapT=c.wrapS=d.C,(l=t[2]).wrapT=l.wrapS=d.C,(f=t[3]).wrapT=f.wrapS=d.C,(h=t[4]).wrapT=h.wrapS=d.C,(v=t[5]).wrapT=v.wrapS=d.C}));case 3:this.meshLambert.start(l),this.meshPhong.start(r,l),this.water.start(h,this.target1.depthTexture,this.target2.depthTexture),this.instanceMeshPhong.start(r,l),this.ground.start(c,f),this.background.start(v),this.scene.add(this.meshLambert),this.scene.add(this.meshPhong),this.scene.add(this.water),this.scene.add(this.ambLight),this.scene.add(this.dirLight1),this.scene.add(this.dirLight2),this.scene.add(this.pointLight1),this.scene.add(this.pointLight2),this.scene.add(this.instanceMeshPhong),this.scene.add(this.ground),this.scene.add(this.background),this.scene.add(this.dirLightHelper1),this.scene.add(this.dirLightHelper2),this.scene.add(this.pointLightHelper1),this.scene.add(this.pointLightHelper2),this.meshLambert.visible=!1,this.meshPhong.visible=!0,this.water.visible=!0,this.dirLightHelper1.visible=!1,this.dirLightHelper2.visible=!1,this.pointLightHelper1.visible=!1,this.pointLightHelper2.visible=!1,this.clock.start();case 32:case"end":return t.stop()}}),t,this)}))),function(){return e.apply(this,arguments)})},{key:"update",value:function(){var time=!0===this.clock.running?this.clock.getDelta():0;this.isPlaying&&(this.meshLambert.update(),this.meshPhong.update(),this.water.update(time,this.renderer,this.scene,this.camera)),this.water.visible=!1,this.renderer.setRenderTarget(this.target1),this.renderer.render(this.scene,this.camera),this.meshPhong.visible=!1,this.instanceMeshPhong.visible=!1,this.ground.position.y=-25,this.renderer.setRenderTarget(this.target2),this.renderer.render(this.scene,this.camera),this.meshPhong.visible=!0,this.instanceMeshPhong.visible=!0,this.water.visible=!0,this.ground.position.y=-40,this.renderer.setRenderTarget(null),this.renderer.render(this.scene,this.camera),this.controls.update()}},{key:"resize",value:function(){this.resolution.set(window.innerWidth,window.innerHeight),this.camera.resize(this.resolution),this.water.resize(this.resolution),this.target1.setSize(this.resolution.x,this.resolution.y),this.target2.setSize(this.resolution.x,this.resolution.y),this.renderer.setSize(this.resolution.x,this.resolution.y)}},{key:"playPause",value:function(t){this.isPlaying=t}},{key:"resetControls",value:function(){this.controls.reset()}},{key:"toggleHelper",value:function(){this.dirLightHelper1.visible=!this.dirLightHelper1.visible,this.dirLightHelper2.visible=!this.dirLightHelper2.visible,this.pointLightHelper1.visible=!this.pointLightHelper1.visible,this.pointLightHelper2.visible=!this.pointLightHelper2.visible}}]),t}();e.a=function(t,e){Object(r.a)(t),e("webgl",new $)}},161:function(t,e,n){var content=n(225);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,n(32).default)("66bd7df5",content,!0,{sourceMap:!1})},162:function(t,e,n){var content=n(227);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,n(32).default)("16f0e21d",content,!0,{sourceMap:!1})},163:function(t,e,n){var content=n(231);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,n(32).default)("1f6d2a64",content,!0,{sourceMap:!1})},164:function(t,e,n){var content=n(233);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,n(32).default)("23c03e60",content,!0,{sourceMap:!1})},165:function(t,e,n){var content=n(235);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,n(32).default)("8b6a1e46",content,!0,{sourceMap:!1})},166:function(t,e,n){var content=n(237);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,n(32).default)("64d8187e",content,!0,{sourceMap:!1})},167:function(t,e,n){"use strict";n.r(e);var r={props:{tag:{type:String,default:"button"},to:{type:String,default:""},width:{type:String,default:"100%"},height:{type:String,default:"42px"},role:{type:String,default:"common"},radius:{type:String,default:"3px"},active:{type:Boolean,default:!1}},computed:{styles:function(){return{width:this.width,height:this.height,borderRadius:this.radius}},classnames:function(){return["".concat(this.role),{"is-active":this.active}]}}},o=(n(230),n(3)),component=Object(o.a)(r,(function(){var t=this,e=t.$createElement;return(t._self._c||e)(t.tag,{tag:"div",staticClass:"button",class:t.classnames,style:t.styles,attrs:{to:t.to},on:{click:function(e){return t.$emit("click",e)}}},[t._t("default")],2)}),[],!1,null,"139c290f",null);e.default=component.exports},177:function(t,e,n){"use strict";var r={mounted:function(){window.addEventListener("resize",this.resize),this.$webgl.start(),this.resize(),this.update()},methods:{update:function(){this.$webgl.update(),requestAnimationFrame(this.update)},resize:function(){this.$webgl.resize()}}},o=(n(224),n(3)),component=Object(o.a)(r,(function(){var t=this.$createElement,e=this._self._c||t;return e("div",[e("Header"),e("div",{staticClass:"page"},[e("nuxt")],1),e("Controls")],1)}),[],!1,null,"de06b6b0",null);e.a=component.exports;installComponents(component,{Header:n(246).default,Controls:n(249).default})},179:function(t,e,n){n(180),t.exports=n(181)},222:function(t,e,n){var content=n(223);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,n(32).default)("43cd68d9",content,!0,{sourceMap:!1})},223:function(t,e,n){var r=n(30)(!1);r.push([t.i,"html{height:100%}body{min-height:100%;line-height:1;color:#fff}h1,h2,h3,h4,h5,h6{line-height:.65;font-weight:400}#canvas-webgl{position:absolute;top:0;left:0;z-index:1}",""]),t.exports=r},224:function(t,e,n){"use strict";n(161)},225:function(t,e,n){var r=n(30)(!1);r.push([t.i,".page[data-v-de06b6b0]{position:relative;z-index:2}",""]),t.exports=r},226:function(t,e,n){"use strict";n(162)},227:function(t,e,n){var r=n(30)(!1);r.push([t.i,".header[data-v-265482bf]{position:fixed;padding-bottom:0;left:0;z-index:3;letter-spacing:.1em}@media (min-width:768px){.header[data-v-265482bf]{bottom:0;padding:40px}}@media (max-width:767px){.header[data-v-265482bf]{top:0;padding:20px}}.header h1[data-v-265482bf]{margin-top:0;margin-bottom:12px;font-size:18px}.header p[data-v-265482bf]{line-height:1.5;margin-top:0;margin-bottom:8px;font-size:11px}.header .buttons[data-v-265482bf]{display:flex}.header .button[data-v-265482bf]{margin-right:4px}",""]),t.exports=r},230:function(t,e,n){"use strict";n(163)},231:function(t,e,n){var r=n(30)(!1);r.push([t.i,".button[data-v-139c290f]{-webkit-appearance:none;-moz-appearance:none;appearance:none;box-sizing:border-box;cursor:pointer;display:flex;justify-content:center;align-items:center;line-height:1;overflow:hidden;text-decoration:none;transition-duration:.4s}.button[data-v-139c290f]:hover{transition-duration:.2s}.button[data-v-139c290f]:active{transition-duration:.04s}.button.common[data-v-139c290f]{border:0;color:#000;background-color:#fff;transition-property:color,background-color}.button.common[data-v-139c290f]:hover{color:#fff;background-color:#333}.button.common[data-v-139c290f]:active{background-color:#f36}.button.common.is-active[data-v-139c290f]{color:#000;background-color:#f36}.button.transparent[data-v-139c290f]{border:0;color:#fff;background-color:transparent;transition-property:color,background-color}.button.transparent[data-v-139c290f]:hover{color:#000;background-color:#fff}.button.transparent[data-v-139c290f]:active{background-color:#f36}",""]),t.exports=r},232:function(t,e,n){"use strict";n(164)},233:function(t,e,n){var r=n(30)(!1);r.push([t.i,".controls[data-v-4638c2f0]{display:flex;justify-content:space-between;position:fixed;bottom:0;right:0;z-index:4;letter-spacing:.1em;background-color:#111}@media (min-width:768px){.controls[data-v-4638c2f0]{flex-direction:column;top:0;padding:20px 12px}}@media (max-width:767px){.controls[data-v-4638c2f0]{left:0;padding:12px}}.controls h1[data-v-4638c2f0]{margin-top:0;margin-bottom:12px;font-size:18px}.controls p[data-v-4638c2f0]{line-height:1.5;margin-top:0;margin-bottom:8px;font-size:11px}@media (max-width:767px){.buttons[data-v-4638c2f0]{display:flex}}@media (min-width:768px){.button[data-v-4638c2f0]{margin-top:12px}.button[data-v-4638c2f0]:first-child{margin-top:0}}@media (max-width:767px){.button[data-v-4638c2f0]{margin-left:8px}}",""]),t.exports=r},234:function(t,e,n){"use strict";n(165)},235:function(t,e,n){var r=n(30)(!1);r.push([t.i,".menu-help[data-v-3d473280]{box-sizing:border-box;line-height:1.5;font-size:11px}@media (min-width:768px){.menu-help[data-v-3d473280]{width:360px;padding:24px 32px}}@media (max-width:767px){.menu-help[data-v-3d473280]{width:calc(100vw - 48px);padding:16px 24px}}.menu-help__heading[data-v-3d473280]{margin-bottom:4px;font-size:15px}.menu-help a[data-v-3d473280]{color:#fff}.menu-help a[data-v-3d473280]:hover{text-decoration:none}.menu-help ul[data-v-3d473280]{margin:0;padding-left:20px}.menu-help li[data-v-3d473280]{margin-top:4px}.menu-help svg[data-v-3d473280]{vertical-align:middle;margin-left:4px}",""]),t.exports=r},236:function(t,e,n){"use strict";n(166)},237:function(t,e,n){var r=n(30)(!1);r.push([t.i,".menu[data-v-2e345f8f]{position:relative}.menu__card[data-v-2e345f8f]{box-sizing:border-box;position:absolute;color:#fff;background-color:#111}.menu__card.v-enter[data-v-2e345f8f]{opacity:0}.menu__card.v-enter-to[data-v-2e345f8f]{transform:translateZ(0)}.menu__card.v-leave-to[data-v-2e345f8f]{opacity:0}.menu__card.v-enter-to[data-v-2e345f8f],.menu__card.v-leave-to[data-v-2e345f8f]{transition-duration:.2s;transition-property:opacity,transform}@media (min-width:768px){.menu__card[data-v-2e345f8f]{bottom:0;right:56px;border-radius:8px}.menu__card.v-enter[data-v-2e345f8f],.menu__card.v-leave-to[data-v-2e345f8f]{transform:translate3d(0,28px,0)}}@media (max-width:767px){.menu__card[data-v-2e345f8f]{right:0;bottom:56px;border-radius:4px}.menu__card.v-enter[data-v-2e345f8f],.menu__card.v-leave-to[data-v-2e345f8f]{transform:translate3d(28px,0,0)}}",""]),t.exports=r},238:function(t,e,n){"use strict";n.r(e),n.d(e,"state",(function(){return r})),n.d(e,"mutations",(function(){return o}));var r=function(){return{isPlaying:!0}},o={playPause:function(t){t.isPlaying=!t.isPlaying,this.$webgl.playPause(t.isPlaying)}}},240:function(t,e,n){t.exports=n.p+"img/Alunar_Cliff_basecolor.b6363ae.png"},241:function(t,e,n){t.exports=n.p+"img/Alunar_Ground_basecolor.a1313f1.jpg"},242:function(t,e,n){t.exports=n.p+"img/Alunar_Cliff_normal.17d18ec.jpg"},243:function(t,e,n){t.exports=n.p+"img/Alunar_Ground_normal.40d16ad.jpg"},244:function(t,e,n){t.exports=n.p+"img/Ocean-4-Normal.8921dc7.jpg"},245:function(t,e,n){t.exports=n.p+"img/004_nebula_red.bf18da3.jpg"},246:function(t,e,n){"use strict";n.r(e);var r={},o=(n(226),n(3)),component=Object(o.a)(r,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"header"},[n("h1",[t._v("study-threejs-lighting")]),t._m(0),n("div",{staticClass:"buttons"},[n("Button",{attrs:{role:"transparent",tag:"a",href:"https://github.com/ykob/study-threejs-lighting",width:"32px",height:"32px",radius:"50%",target:"_blank"}},[n("IconGithub")],1),n("Button",{attrs:{role:"transparent",tag:"a",href:"https://twitter.com/ykob0123",width:"32px",height:"32px",radius:"50%",target:"_blank"}},[n("IconTwitter")],1)],1)])}),[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("It's a study record of 3D graphic lighting"),n("br"),t._v("with the shaders that I created by quoting from three.js.")])}],!1,null,"265482bf",null);e.default=component.exports;installComponents(component,{IconGithub:n(247).default,Button:n(167).default,IconTwitter:n(248).default})},247:function(t,e,n){"use strict";n.r(e);n(39);var r=n(18),o={props:{size:{type:[Number,String],default:24},fill:{type:String,default:"currentColor"}},computed:{d:function(){return r.c}}},c=n(3),component=Object(c.a)(o,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("IconBase",{attrs:{iconName:"github",size:t.size,fill:t.fill}},[n("path",{attrs:{d:t.d}})])}),[],!1,null,null,null);e.default=component.exports;installComponents(component,{IconBase:n(45).default})},248:function(t,e,n){"use strict";n.r(e);n(39);var r=n(18),o={props:{size:{type:[Number,String],default:24},fill:{type:String,default:"currentColor"}},computed:{d:function(){return r.j}}},c=n(3),component=Object(c.a)(o,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("IconBase",{attrs:{iconName:"twitter",size:t.size,fill:t.fill}},[n("path",{attrs:{d:t.d}})])}),[],!1,null,null,null);e.default=component.exports;installComponents(component,{IconBase:n(45).default})},249:function(t,e,n){"use strict";n.r(e);var r={data:function(){return{isShownHelper:!1}},computed:{isPlaying:function(){return this.$store.state.isPlaying}},methods:{resetControls:function(){this.$webgl.resetControls()},toggleHelper:function(){this.isShownHelper=!this.isShownHelper,this.$webgl.toggleHelper()}}},o=(n(232),n(3)),component=Object(o.a)(r,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"controls"},[n("div",{staticClass:"buttons"},[n("Button",{attrs:{width:"36px",height:"36px",radius:"50%"},on:{click:function(e){return t.$store.commit("playPause")}}},[t.isPlaying?n("IconPause"):n("IconPlay")],1),n("Button",{attrs:{width:"36px",height:"36px",radius:"50%"},on:{click:t.resetControls}},[n("IconRestore")],1),n("Button",{attrs:{width:"36px",height:"36px",radius:"50%",active:t.isShownHelper},on:{click:t.toggleHelper}},[n("IconHelpRhombusOutline")],1)],1),n("div",{staticClass:"buttons"},[n("Menu",{scopedSlots:t._u([{key:"activator",fn:function(t){var e=t.on,r=t.isShown;return[n("Button",{attrs:{width:"36px",height:"36px",radius:"50%",active:r},on:{click:e}},[n("IconHelp")],1)]}}])},[n("MenuHelp")],1)],1)])}),[],!1,null,"4638c2f0",null);e.default=component.exports;installComponents(component,{IconPause:n(250).default,IconPlay:n(251).default,Button:n(167).default,IconRestore:n(252).default,IconHelp:n(253).default,MenuHelp:n(254).default,Menu:n(256).default})},250:function(t,e,n){"use strict";n.r(e);n(39);var r=n(18),o={props:{size:{type:[Number,String],default:24},fill:{type:String,default:"currentColor"}},computed:{d:function(){return r.g}}},c=n(3),component=Object(c.a)(o,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("IconBase",{attrs:{iconName:"pause",size:t.size,fill:t.fill}},[n("path",{attrs:{d:t.d}})])}),[],!1,null,null,null);e.default=component.exports;installComponents(component,{IconBase:n(45).default})},251:function(t,e,n){"use strict";n.r(e);n(39);var r=n(18),o={props:{size:{type:[Number,String],default:24},fill:{type:String,default:"currentColor"}},computed:{d:function(){return r.h}}},c=n(3),component=Object(c.a)(o,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("IconBase",{attrs:{iconName:"play",size:t.size,fill:t.fill}},[n("path",{attrs:{d:t.d}})])}),[],!1,null,null,null);e.default=component.exports;installComponents(component,{IconBase:n(45).default})},252:function(t,e,n){"use strict";n.r(e);n(39);var r=n(18),o={props:{size:{type:[Number,String],default:24},fill:{type:String,default:"currentColor"}},computed:{d:function(){return r.i}}},c=n(3),component=Object(c.a)(o,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("IconBase",{attrs:{iconName:"restore",size:t.size,fill:t.fill}},[n("path",{attrs:{d:t.d}})])}),[],!1,null,null,null);e.default=component.exports;installComponents(component,{IconBase:n(45).default})},253:function(t,e,n){"use strict";n.r(e);n(39);var r=n(18),o={props:{size:{type:[Number,String],default:24},fill:{type:String,default:"currentColor"}},computed:{d:function(){return r.d}}},c=n(3),component=Object(c.a)(o,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("IconBase",{attrs:{iconName:"help",size:t.size,fill:t.fill}},[n("path",{attrs:{d:t.d}})])}),[],!1,null,null,null);e.default=component.exports;installComponents(component,{IconBase:n(45).default})},254:function(t,e,n){"use strict";n.r(e);var r={},o=(n(234),n(3)),component=Object(o.a)(r,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"menu-help"},[n("div",{staticClass:"menu-help__heading"},[t._v("Assets")]),n("ul",[n("li",[n("a",{attrs:{href:"https://www.cgtrader.com/3d-model-collections/ocean-8k",target:"_blank"}},[t._v("Water Surface Normal Map"),n("IconOpenInNew",{attrs:{size:16}})],1)]),n("li",[n("a",{attrs:{href:"https://www.cgtrader.com/3d-models/textures/natural/s-ea3e180f-bfed-4c62-aaa1-4045e48d8d59",target:"_blank"}},[t._v("Object Normal Maps"),n("IconOpenInNew",{attrs:{size:16}})],1)]),n("li",[n("a",{attrs:{href:"https://www.cgtrader.com/3d-models/textures/miscellaneous/nebula-spherical-maps-and-skyboxes-8192x4096-px",target:"_blank"}},[t._v("Nebula Spherical Map"),n("IconOpenInNew",{attrs:{size:16}})],1)])])])}),[],!1,null,"3d473280",null);e.default=component.exports;installComponents(component,{IconOpenInNew:n(255).default})},255:function(t,e,n){"use strict";n.r(e);n(39);var r=n(18),o={props:{size:{type:[Number,String],default:24},fill:{type:String,default:"currentColor"}},computed:{d:function(){return r.f}}},c=n(3),component=Object(c.a)(o,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("IconBase",{attrs:{iconName:"open-in-new",size:t.size,fill:t.fill}},[n("path",{attrs:{d:t.d}})])}),[],!1,null,null,null);e.default=component.exports;installComponents(component,{IconBase:n(45).default})},256:function(t,e,n){"use strict";n.r(e);var r={data:function(){return{isShown:!1}},methods:{toggle:function(){this.isShown=!this.isShown},close:function(){this.isShown=!1}}},o=(n(236),n(3)),component=Object(o.a)(r,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"menu"},[n("div",{staticClass:"menu__activator"},[t._t("activator",null,{on:t.toggle,isShown:t.isShown})],2),n("transition",[n("div",{directives:[{name:"show",rawName:"v-show",value:t.isShown,expression:"isShown"}],staticClass:"menu__card"},[t._t("default")],2)])],1)}),[],!1,null,"2e345f8f",null);e.default=component.exports},45:function(t,e,n){"use strict";n.r(e);n(39);var r={props:{iconName:{type:String,default:""},size:{type:[Number,String],default:24},fill:{type:String,default:"currentColor"}}},o=n(3),component=Object(o.a)(r,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:t.size,height:t.size,viewBox:"0 0 24 24","aria-labelledby":t.iconName,role:"presentation"}},[n("title",{attrs:{id:t.iconName,lang:"en"}},[t._v(t._s(t.iconName)+" icon")]),n("g",{attrs:{fill:t.fill}},[t._t("default")],2)])}),[],!1,null,null,null);e.default=component.exports}},[[179,6,1,7]]]);